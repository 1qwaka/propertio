name: Test Pipeline

on:
  push:
    branches:
      - master
      - check-actions
  pull_request:
    branches:
      - master
      - check-actions

jobs:
  linters:
    runs-on: ubuntu-latest
    outputs:
      ci_skip: ${{ steps.set_skip.outputs.CI_SKIP }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        uses: KengoTODA/actions-setup-docker-compose@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run linters
        run: |
          docker-compose -f linter.docker-compose.yaml up --abort-on-container-exit

      - name: Set Skip
        id: set_skip
        if: failure()
        run: |
          echo "CI_SKIP=true" >> $GITHUB_OUTPUT

      - name: Save linter report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: linter-report
          path: linter-report

  unit_tests:
    if: success()
    outputs:
      ci_skip: ${{ steps.set_skip.outputs.CI_SKIP }}
    runs-on: ubuntu-latest
    needs: linters
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        uses: KengoTODA/actions-setup-docker-compose@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create .env
        run: |
          echo "${{ vars.UNIT_TEST_ENV }}" > .env

      - name: Run unit tests
        run: |
          docker-compose -f unit.docker-compose.yaml up --abort-on-container-exit --build

      - name: Set Skip
        id: set_skip
        if: failure()
        run: |
          echo "CI_SKIP=true" >> $GITHUB_OUTPUT

      - name: Ensure allure-report exists
        if: always()
        run: |
          mkdir -p allure-results

      - name: Save Allure results from unit tests
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-unit
          path: allure-results

  integration_tests:
    runs-on: ubuntu-latest
    outputs:
      ci_skip: ${{ steps.set_skip.outputs.CI_SKIP }}
    needs: [ unit_tests, linters ]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        uses: KengoTODA/actions-setup-docker-compose@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create .env
        run: |
          echo "${{ vars.UNIT_TEST_ENV }}" > .env

      - name: Add skipping flag to integration tests
        id: add_skip
        if: needs.unit_tests.outputs.ci_skip == 'true' || needs.linters.outputs.ci_skip == 'true'
        run: |
          echo "CI_SKIP=true" >> .env

      - name: Run integration tests
        run: |
          docker-compose -f integration.docker-compose.yaml up --abort-on-container-exit --build

      - name: Set Skip
        id: set_skip
        if: failure() || needs.unit_tests.outputs.ci_skip == 'true'
        run: |
          echo "CI_SKIP=true" >> $GITHUB_OUTPUT

      - name: Ensure allure-report exists
        if: always()
        run: |
          mkdir -p allure-results

      - name: Save Allure results from integration tests
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-integration
          path: allure-results

  e2e_tests:
    runs-on: ubuntu-latest
    needs: integration_tests
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create .env
        run: |
          echo "${{ vars.UNIT_TEST_ENV }}" > .env

      - name: Add skipping flag to e2e tests
        if: needs.integration_tests.outputs.ci_skip == 'true'
        run: |
          echo "CI_SKIP=true" >> .env

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        uses: KengoTODA/actions-setup-docker-compose@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure otel-traces.json exists and it is a file
        if: always()
        run: |
          touch otel-traces.json

      - name: Run e2e tests
        run: |
          docker-compose -f e2e.docker-compose.yaml up --abort-on-container-exit --build

      - name: Ensure allure-report exists
        if: always()
        run: |
          mkdir -p allure-results

      - name: Save Allure results from e2e tests
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-e2e
          path: allure-results

      - name: Save Telemetry results from e2e tests
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: traces-e2e
          path: otel-traces.json
  combine_allure_results:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [unit_tests, integration_tests, e2e_tests]
    if: always()
    steps:
      - name: Download Allure results from unit tests
        uses: actions/download-artifact@v4
        with:
          name: allure-results-unit
          path: combined-results

      - name: Download Allure results from integration tests
        uses: actions/download-artifact@v4
        with:
          name: allure-results-integration
          path: combined-results

      - name: Download Allure results from e2e tests
        uses: actions/download-artifact@v4
        with:
          name: allure-results-e2e
          path: combined-results

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Install Allure CLI
        run: |
          curl -o allure.tar.gz -sSL https://github.com/allure-framework/allure2/releases/download/2.32.0/allure-2.32.0.tgz
          mkdir -p /usr/local/bin/allure
          tar -xzf allure.tar.gz -C /usr/local/bin/allure --strip-components=1
          export PATH=$PATH:/usr/local/bin/allure/bin
          allure generate combined-results --clean -o allure-report

      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: Upload combined Allure results
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-combined
          path: combined-results
